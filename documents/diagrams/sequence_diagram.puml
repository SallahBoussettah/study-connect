    @startuml StudyConnect Messaging Sequence

    skinparam sequenceArrowThickness 2
    skinparam roundcorner 5
    skinparam sequenceGroupBackgroundColor #F8F9FA
    skinparam sequenceGroupBorderColor #DEE2E6
    skinparam sequenceLifeLineBorderColor #ADB5BD
    skinparam sequenceLifeLineBackgroundColor #E9ECEF

    actor "User" as user
    participant "Frontend\nReact App" as frontend
    participant "Backend\nAPI Server" as backend
    participant "Socket.IO\nServer" as socketio
    database "Database" as db
    participant "Other Users\nin Room" as others

    == Authentication ==

    user -> frontend : Login with credentials
    activate frontend
    frontend -> backend : POST /api/auth/login
    activate backend
    backend -> db : Validate credentials
    activate db
    db --> backend : Return user data
    deactivate db
    backend -> backend : Generate JWT token
    backend --> frontend : Return token & user info
    deactivate backend
    frontend -> frontend : Store token in localStorage
    frontend --> user : Display dashboard
    deactivate frontend

    == Join Study Room ==

    user -> frontend : Select study room
    activate frontend
    frontend -> backend : GET /api/study-rooms/:roomId
    activate backend
    backend -> db : Fetch room details
    activate db
    db --> backend : Return room data
    deactivate db
    backend --> frontend : Return room details
    deactivate backend

    frontend -> socketio : Connect to socket with token
    activate socketio
    socketio -> socketio : Authenticate user
    socketio -> socketio : Join room channel
    socketio --> frontend : Connection established
    deactivate socketio

    frontend -> backend : POST /api/study-rooms/:roomId/join
    activate backend
    backend -> db : Update room membership
    activate db
    db --> backend : Confirm join
    deactivate db
    backend -> socketio : Broadcast user joined event
    activate socketio
    socketio --> others : User joined notification
    deactivate socketio
    backend --> frontend : Join confirmation
    deactivate backend

    frontend --> user : Display study room interface
    deactivate frontend

    == Send Message ==

    user -> frontend : Type and send message
    activate frontend
    frontend -> frontend : Validate message
    frontend -> backend : POST /api/study-rooms/:roomId/messages
    activate backend
    backend -> db : Store message
    activate db
    db --> backend : Confirm storage
    deactivate db
    backend -> socketio : Emit new message event
    activate socketio
    socketio --> others : Real-time message delivery
    socketio --> frontend : Message delivery confirmation
    deactivate socketio
    backend --> frontend : Message sent confirmation
    deactivate backend
    frontend --> user : Display message in chat
    deactivate frontend

    == Receive Message ==

    socketio -> frontend : New message event
    activate frontend
    frontend -> frontend : Add message to state
    frontend --> user : Display new message
    deactivate frontend

    == Leave Study Room ==

    user -> frontend : Click leave room
    activate frontend
    frontend -> backend : POST /api/study-rooms/:roomId/leave
    activate backend
    backend -> db : Update room membership
    activate db
    db --> backend : Confirm leave
    deactivate db
    backend -> socketio : Broadcast user left event
    activate socketio
    socketio --> others : User left notification
    deactivate socketio
    backend --> frontend : Leave confirmation
    deactivate backend

    frontend -> socketio : Leave room channel
    activate socketio
    socketio --> frontend : Channel left
    deactivate socketio

    frontend --> user : Return to dashboard
    deactivate frontend

    @enduml 